import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/korlibs/korlibs" }
        maven { url "https://dl.bintray.com/soywiz/soywiz" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url "https://dl.bintray.com/kotlin/kotlinx" }
        maven { url "https://dl.bintray.com/kotlin/ktor" }
        maven { url "https://plugins.gradle.org/m2" }
        maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.61' apply false
}

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://dl.bintray.com/korlibs/korlibs" }
        maven { url "https://dl.bintray.com/soywiz/soywiz" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url "https://dl.bintray.com/kotlin/kotlinx" }
        maven { url "https://dl.bintray.com/kotlin/ktor" }
        maven { url "https://plugins.gradle.org/m2" }
        maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
    }
}

subprojects {
    apply plugin: "kotlin-multiplatform"
    apply plugin: "kotlinx-serialization"

    kotlin {
        jvm {
            [compilations.main, compilations.test]*.kotlinOptions {
                // Setup the Kotlin compiler options for the 'main' compilation:
                jvmTarget = "1.8"
            }
        }
        js {
            [compilations.main, compilations.test]*.kotlinOptions {
                languageVersion = "1.3"
                //sourceMap = true
                sourceMap = false
                metaInfo = true
                moduleKind = "umd"
                //moduleKind = "amd"
                main = "call"
            }
        }

        sourceSets {
            commonMain {
                dependencies {
                    implementation kotlin('stdlib-common')
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializationRuntimeVersion"
                }
            }
            jvmMain {
                dependencies {
                    implementation kotlin('stdlib-jdk8')
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializationRuntimeVersion"
                }
            }
            jsMain {
                dependencies {
                    implementation kotlin('stdlib-js')
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serializationRuntimeVersion"
                }
            }
        }
    }
}

apply plugin: 'idea'

idea {
    module {
        excludeDirs = [file("@old"), file(web_dir)]
    }
}

task baseDeploy(type: Task) {
    doLast {
        exec {
            commandLine "rsync",
                    "-av",
                    "Dockerfile",
                    "docker-compose.yml",
                    "mmo/build/libs/mmo.jar",
                    "web",
                    "soywiz:/home/virtual/soywiz/mmo.soywiz.com/"
        }
    }
}

task deploy(dependsOn: ":mmo:jvmFatJar") {
    finalizedBy baseDeploy
}

/*
task runAll(dependsOn: [":mmo-js:buildAndCopy", ":mmo-jvm:shadowJar", ":mmo-jvm:runServer"]) {

}

task copyFatJar(dependsOn: [":mmo-jvm:build", ":mmo-jvm:shadowJar", ":mmo-js:buildAndCopy"], type: Copy) {
    from "${rootProject.rootDir}/mmo/jvm/build/libs/mmo-server.jar"
    into "${rootProject.rootDir}"
}

task copyFatJarAndRunAll(dependsOn: [copyFatJar, runAll]) {

}
*/
